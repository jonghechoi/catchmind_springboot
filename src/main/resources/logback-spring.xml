<?xml version="1.0" encoding="UTF-8"?>
<configuration>
    <!--<property name="LogsPath" value="C:/CatchMindLogs"/>--> <!-- log 파일 경로 설정 (설정 부분에서 EL태그 형식으로 name값으로 사용)-->
    <springProperty scope="context" name="LogsPath" source="logging.file.path"/> <!--application.properties에 설정한 값을 name으로 사용-->
    <!--인텔리제이 콘솔 출력-->
    <appender name="SYSOUT" class="ch.qos.logback.core.ConsoleAppender">
        <encoder> <!--로그 컬러 입히기-->
            <pattern>[%d{yyyy-MM-dd HH:mm:ss}:%-3relative][%thread] %highlight(%-5level) %cyan(%logger{36}) - %msg%n</pattern>
            <outputPatternAsHeader>true</outputPatternAsHeader>
        </encoder>
    </appender>
    <!--INFO 수준의 로그 설정-->
    <appender name="INFO_LOG" class="ch.qos.logback.core.rolling.RollingFileAppender">
        <file>${LogsPath}/info.log</file> <!--log 파일의 경로 (/info.log : 로그를 기록할 파일명 자동 생성됨)-->
        <filter class="ch.qos.logback.classic.filter.LevelFilter">
            <level>INFO</level>
            <onMatch>ACCEPT</onMatch>
            <onMismatch>DENY</onMismatch>
        </filter>
        <encoder>
            <pattern>[%d{yyyy-MM-dd HH:mm:ss}:%-3relative][%thread] %highlight(%-5level) %cyan(%logger{35}) - %msg%n</pattern>
            <outputPatternAsHeader>true</outputPatternAsHeader>
        </encoder>
        <rollingPolicy class="ch.qos.logback.core.rolling.TimeBasedRollingPolicy">
            <fileNamePattern>${LogsPath}/was-logs/info.%d{yyyy-MM-dd}.%i.log.gz</fileNamePattern>
            <timeBasedFileNamingAndTriggeringPolicy class="ch.qos.logback.core.rolling.SizeAndTimeBasedFNATP">
                <maxFileSize>10MB</maxFileSize>
            </timeBasedFileNamingAndTriggeringPolicy>
            <maxHistory>180</maxHistory>
        </rollingPolicy>
    </appender>

    <!--WARN 수준의 로그 설정-->
    <appender name="WARN_LOG" class="ch.qos.logback.core.rolling.RollingFileAppender">
        <file>${LogsPath}/warn.log</file> <!--log 파일의 경로 (/warn.log : 로그를 기록할 파일명 자동 생성됨)-->
        <filter class="ch.qos.logback.classic.filter.LevelFilter">
            <level>WARN</level>
            <onMatch>ACCEPT</onMatch>
            <onMismatch>DENY</onMismatch>
        </filter>
        <encoder>
            <pattern>[%d{yyyy-MM-dd HH:mm:ss}:%-3relative][%thread] %highlight(%-5level) %cyan(%logger{35}) - %msg%n</pattern>
            <outputPatternAsHeader>true</outputPatternAsHeader>
        </encoder>
        <rollingPolicy class="ch.qos.logback.core.rolling.TimeBasedRollingPolicy">
            <fileNamePattern>${LogsPath}/was-logs/warn.%d{yyyy-MM-dd}.%i.log.gz</fileNamePattern>
            <timeBasedFileNamingAndTriggeringPolicy class="ch.qos.logback.core.rolling.SizeAndTimeBasedFNATP">
                <maxFileSize>10MB</maxFileSize>
            </timeBasedFileNamingAndTriggeringPolicy>
            <maxHistory>30</maxHistory>
        </rollingPolicy>
    </appender>

    <!--ERROR 수준의 로그 설정-->
    <appender name="ERROR_LOG" class="ch.qos.logback.core.rolling.RollingFileAppender">
        <file>${LogsPath}/error.log</file> <!--log 파일의 경로 (/error.log : 로그를 기록할 파일명 자동 생성됨)-->
        <filter class="ch.qos.logback.classic.filter.LevelFilter">
            <level>ERROR</level>
            <onMatch>ACCEPT</onMatch>
            <onMismatch>DENY</onMismatch>
        </filter>
        <encoder>
            <pattern>[%d{yyyy-MM-dd HH:mm:ss}:%-3relative][%thread] %highlight(%-5level) %cyan(%logger{35}) - %msg%n</pattern>
            <outputPatternAsHeader>true</outputPatternAsHeader>
        </encoder>
        <rollingPolicy class="ch.qos.logback.core.rolling.TimeBasedRollingPolicy">
            <fileNamePattern>${LogsPath}/was-logs/error.%d{yyyy-MM-dd}.%i.log.gz</fileNamePattern>
            <timeBasedFileNamingAndTriggeringPolicy class="ch.qos.logback.core.rolling.SizeAndTimeBasedFNATP">
                <maxFileSize>10MB</maxFileSize>
            </timeBasedFileNamingAndTriggeringPolicy>
            <maxHistory>30</maxHistory>
        </rollingPolicy>
    </appender>

    <root level="INFO">
        <appender-ref ref="SYSOUT"/>
        <appender-ref ref="INFO_LOG"/>
        <appender-ref ref="WARN_LOG"/>
        <appender-ref ref="ERROR_LOG"/>
    </root>

    <!--root 요소에서 각 log 들의 appender를 참조하고 있기 때문에 설정 필요없음-->
    <!--<logger name="LogController" additivity="false">
        <level value = "DEBUG" />
        <appender-ref ref="INFO_LOG" />
        <appender-ref ref="WARN_LOG" />
    </logger>-->

    <!--<logger name="org.hibernate.SQL" additivity="false">
        <level value = "DEBUG" />
        <appender-ref ref="INFO_LOG" />
    </logger>-->

</configuration>